// ===============================
// feed.js â€” Blinkly Chat Online
// ===============================

// ========== DOM ==========
const appWrapper = document.getElementById('app-wrapper');
const mainSidebarNav = document.querySelector('.main-sidebar-nav');
const leftSidebar = document.querySelector('.left-sidebar');
const chatMainArea = document.querySelector('.chat-main-area');
const serverIcons = document.querySelectorAll('.server-icon');
const friendsSection = document.getElementById('friends-section');
const categoriesSection = document.getElementById('categories-section');
const friendsNavButtons = document.querySelectorAll('.friends-button');
const roomItems = document.querySelectorAll('.room-item');

const chatInput = document.getElementById('chat-input');
const sendButton = document.getElementById('send-btn');
const chatRoomName = document.getElementById('chat-room-name');
const chatMessagesContainer = document.getElementById('chat-messages');
const aiChatMessagesContainer = document.getElementById('ai-chat-messages-container');
const onlineUsersCount = document.getElementById('online-users-count');
const displayUsername = document.getElementById('display-username');
const userAvatarImg = document.getElementById('user-avatar-img');

const createRoomBtn = document.getElementById('create-room-btn');
const joinRoomBtn = document.getElementById('join-room-btn');
const privateRoomsList = document.getElementById('private-rooms-list');

const themeSelect = document.getElementById('theme-select');
const notificationToggle = document.getElementById('notification-toggle');

// Modais â€“ Perfil
const profileEditModal = document.getElementById('profile-edit-modal');
const openProfileModalBtn = document.getElementById('open-profile-modal-btn');
const closeProfileModalBtn = document.getElementById('close-profile-modal-btn');
const saveProfileBtn = document.getElementById('save-profile-btn');
const profileUsernameInput = document.getElementById('profile-username-input');
const avatarUploadInput = document.getElementById('avatar-upload');
const modalAvatarPreview = document.getElementById('modal-avatar-preview');
const profileMessage = document.getElementById('profile-message');

// Modais â€“ Criar Sala
const createRoomModal = document.getElementById('create-room-modal');
const closeCreateRoomBtn = document.getElementById('close-create-room-btn');
const confirmCreateRoomBtn = document.getElementById('confirm-create-room-btn');
const newRoomNameInput = document.getElementById('new-room-name');
const createRoomMessageElement = document.getElementById('create-room-message');
const createRoomCodeElement = document.getElementById('generated-room-code');

// Modais â€“ Entrar em Sala
const joinRoomModal = document.getElementById('join-room-modal');
const closeJoinRoomBtn = document.getElementById('close-join-room-btn');
const confirmJoinRoomBtn = document.getElementById('confirm-join-room-btn');
const joinRoomCodeInput = document.getElementById('join-room-code');
const joinRoomMessageElement = document.getElementById('join-room-message');

// Modais â€“ Amigos
const addFriendModal = document.getElementById('add-friend-modal');
const openAddFriendModalBtn = document.getElementById('open-add-friend-modal-btn');
const closeAddFriendModalBtn = document.getElementById('close-add-friend-modal-btn');
const friendUsernameSearchInput = document.getElementById('friend-username-search');
const searchFriendBtn = document.getElementById('search-friend-btn');
const searchResultMessage = document.getElementById('search-result-message');
const foundUserProfileBox = document.getElementById('found-user-profile');
const foundUserAvatar = document.getElementById('found-user-avatar');
const foundUserName = document.getElementById('found-user-name');
const sendFriendRequestBtn = document.getElementById('send-friend-request-btn');

const friendRequestsModal = document.getElementById('friend-requests-modal');
const showRequestsBtn = document.getElementById('show-requests-btn');
const closeFriendRequestsModalBtn = document.getElementById('close-friend-requests-modal-btn');
const friendRequestsList = document.getElementById('friend-requests-list');

// Modais â€“ ConfiguraÃ§Ãµes
const settingsModal = document.getElementById('settings-modal');
const openSettingsModalBtn = document.getElementById('open-settings-modal-btn');
const closeSettingsModalBtn = document.getElementById('close-settings-modal-btn');

// BotÃµes de sair
const logoutBtn = document.getElementById('logout-btn');
const logoutBtnModal = document.getElementById('logout-btn-modal');

// (Opcional) Se vocÃª criar um botÃ£o/Ã­cone pra mÃºsica, use id="go-music"
const goMusicBtn = document.getElementById('go-music'); // <div id="go-music" class="server-icon">ðŸŽµ</div> â†’ leva para musica.html


// ========== Firebase ==========
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
import { getAuth, onAuthStateChanged, signOut, updateProfile } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import {
Â  getFirestore, collection, addDoc, doc, setDoc, getDoc, getDocs,
Â  updateDoc, serverTimestamp, query, orderBy, onSnapshot, where, deleteDoc
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
import {
Â  getDatabase, ref as rtdbRef, onValue as rtdbOnValue, onDisconnect, set as rtdbSet
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-database.js";
import {
Â  getStorage, ref as storageRef, uploadBytes, getDownloadURL
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-storage.js";

const firebaseConfig = {
Â  apiKey: "AIzaSyBvho-095JnOAwTMCaQ8LxIROlpMCbAppw",
Â  authDomain: "blinkly-online-4169a.firebaseapp.com",
Â  projectId: "blinkly-online-4169a",
Â  storageBucket: "blinkly-online-4169a.firebasestorage.app",
Â  messagingSenderId: "1006187399372",
Â  appId: "1:1006187399372:web:0f4aafedfa74bcb2631a69",
Â  measurementId: "G-50JPVBRMR3",
Â  databaseURL: "https://blinkly-online-4169a-default-rtdb.firebaseio.com"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const rtdb = getDatabase(app);
const storage = getStorage(app);


// ========== Estado ==========
let currentUser = null;
let currentRoom = 'publico'; // bate com seu HTML (# Geral â†’ data-room-id="publico")
let foundUserCache = null; Â  // guarda o usuÃ¡rio encontrado no modal "Adicionar Amigo"


// ========== PresenÃ§a Online ==========
function setupPresence(userId) {
Â  const userRef = rtdbRef(rtdb, 'activeUsers/' + userId);
Â  rtdbSet(userRef, { status: 'online', lastSeen: Date.now() });
Â  onDisconnect(userRef).set({ status: 'offline', lastSeen: Date.now() });
}

function subscribeOnlineCount() {
Â  const activeRef = rtdbRef(rtdb, 'activeUsers');
Â  rtdbOnValue(activeRef, (snapshot) => {
Â  Â  if (snapshot.exists()) {
Â  Â  Â  const users = snapshot.val();
Â  Â  Â  onlineUsersCount && (onlineUsersCount.textContent = Object.keys(users).length);
Â  Â  } else {
Â  Â  Â  onlineUsersCount && (onlineUsersCount.textContent = '0');
Â  Â  }
Â  });
}


// ========== AutenticaÃ§Ã£o ==========
onAuthStateChanged(auth, async (user) => {
Â  if (!user) {
Â  Â  alert('VocÃª precisa fazer login para usar o chat.');
Â  Â  chatInput && (chatInput.disabled = true);
Â  Â  sendButton && (sendButton.disabled = true);
Â  Â  return;
Â  }

Â  currentUser = user;

Â  // Garante que exista um doc de usuÃ¡rio (Ãºtil quando vindo do seu auth.js)
Â  const userDocRef = doc(db, 'users', currentUser.uid);
Â  const snapshot = await getDoc(userDocRef);
Â  if (!snapshot.exists()) {
Â  Â  await setDoc(userDocRef, {
Â  Â  Â  username: currentUser.displayName || 'UsuÃ¡rio',
Â  Â  Â  email: currentUser.email || '',
Â  Â  Â  photoURL: currentUser.photoURL || 'https://www.gravatar.com/avatar/?d=retro&s=200',
Â  Â  Â  createdAt: serverTimestamp(),
Â  Â  Â  usernameLower: (currentUser.displayName || 'UsuÃ¡rio').toLowerCase()
Â  Â  }, { merge: true });
Â  }

Â  // UI header
Â  displayUsername && (displayUsername.textContent = currentUser.displayName || 'UsuÃ¡rio');
Â  if (userAvatarImg) userAvatarImg.style.backgroundImage = `url('${currentUser.photoURL || 'https://www.gravatar.com/avatar/?d=retro&s=200'}')`;

Â  // Habilita chat
Â  chatInput && (chatInput.disabled = false);
Â  sendButton && (sendButton.disabled = false);

Â  // PresenÃ§a e contagem
Â  setupPresence(currentUser.uid);
Â  subscribeOnlineCount();

Â  // Mensagens da sala atual
Â  listenForMessages(currentRoom);

Â  // SolicitaÃ§Ãµes de amizade
Â  listenForFriendRequests();

Â  // Lista de salas privadas
Â  loadPrivateRooms();

Â  // Preenche modal de perfil
Â  if (profileUsernameInput) profileUsernameInput.value = currentUser.displayName || '';
Â  if (modalAvatarPreview) modalAvatarPreview.src = currentUser.photoURL || 'https://www.gravatar.com/avatar/?d=retro&s=200';
});


// ========== Chat ==========
function listenForMessages(roomId) {
Â  // Esconde todos os containers de chat
Â  if (chatMessagesContainer) chatMessagesContainer.style.display = 'none';
Â  if (aiChatMessagesContainer) aiChatMessagesContainer.style.display = 'none';

Â  // Mostra o container correto
Â  if (roomId === 'ia-chat') {
Â  Â  if (aiChatMessagesContainer) aiChatMessagesContainer.style.display = 'block';
Â  Â  // Remove o listener do chat real para nÃ£o haver conflitos
Â  Â  const chatCollectionRef = collection(db, `rooms/${'publico'}/messages`);
Â  Â  onSnapshot(chatCollectionRef, () => {});
Â  Â  clearChat(true);
Â  } else {
Â  Â  if (chatMessagesContainer) chatMessagesContainer.style.display = 'block';
Â  Â  const q = query(collection(db, `rooms/${roomId}/messages`), orderBy("createdAt", "desc"));
Â  Â  onSnapshot(q, (snapshot) => {
Â  Â  Â  clearChat(false);
Â  Â  Â  snapshot.forEach((docSnap) => {
Â  Â  Â  Â  const msg = docSnap.data();
Â  Â  Â  Â  addMessage(msg.username, msg.text, msg.createdAt, msg.avatar, msg.uid, false);
Â  Â  Â  });
Â  Â  });
Â  }
}

async function sendMessage(text) {
Â  if (!currentUser || !text.trim()) return;

Â  // Se for a sala da IA, usa a simulaÃ§Ã£o
Â  if (currentRoom === 'ia-chat') {
Â  Â  addMessage(currentUser.displayName || 'VocÃª', text, null, currentUser.photoURL, currentUser.uid, true);
Â  Â  simulateAIResponse(text);
Â  Â  return;
Â  }
Â  
Â  try {
Â  Â  await addDoc(collection(db, `rooms/${currentRoom}/messages`), {
Â  Â  Â  username: currentUser.displayName || 'UsuÃ¡rio',
Â  Â  Â  uid: currentUser.uid,
Â  Â  Â  text: text.trim(),
Â  Â  Â  createdAt: serverTimestamp(),
Â  Â  Â  avatar: currentUser.photoURL || 'https://www.gravatar.com/avatar/?d=retro&s=200'
Â  Â  });
Â  } catch (e) {
Â  Â  console.error(e);
Â  Â  alert('Erro ao enviar mensagem.');
Â  }
}

function simulateAIResponse(userMessage) {
Â  // Mensagem de desenvolvimento
Â  const developmentMessage = document.createElement('div');
Â  developmentMessage.classList.add('ai-development-message');
Â  developmentMessage.innerHTML = 'A IA estÃ¡ em desenvolvimento e pode ter respostas limitadas. Por favor, aguarde.';
Â  aiChatMessagesContainer.appendChild(developmentMessage);

Â  setTimeout(() => {
Â  Â  const aiResponse = document.createElement('div');
Â  Â  aiResponse.classList.add('message', 'ai-message');
Â  Â  
Â  Â  let responseText = '';
Â  Â  const normalizedMessage = userMessage.toLowerCase().trim();

Â  Â  if (normalizedMessage.includes('filme')) {
Â  Â  Â  responseText = "Minha sugestÃ£o de filme Ã©: 'A Origem' (Inception). Ã‰ um Ã³timo filme de ficÃ§Ã£o cientÃ­fica!";
Â  Â  } else if (normalizedMessage.includes('jogos')) {
Â  Â  Â  responseText = "Que tal 'The Witcher 3'? Ã‰ um jogo com uma histÃ³ria incrÃ­vel e um mundo enorme para explorar.";
Â  Â  } else if (normalizedMessage.includes('dia a dia') || normalizedMessage.includes('recomendaÃ§Ãµes')) {
Â  Â  Â  responseText = "Uma recomendaÃ§Ã£o para o dia a dia: tente beber mais Ã¡gua e fazer pequenas pausas para alongar.";
Â  Â  } else {
Â  Â  Â  responseText = "OlÃ¡! Por enquanto, posso te dar algumas recomendaÃ§Ãµes. Tente perguntar sobre 'filme', 'jogos' ou 'recomendaÃ§Ãµes do dia a dia'.";
Â  Â  }

Â  Â  aiResponse.textContent = responseText;
Â  Â  aiChatMessagesContainer.appendChild(aiResponse);
Â  Â  aiChatMessagesContainer.scrollTop = aiChatMessagesContainer.scrollHeight;

Â  Â  // Remove a mensagem de desenvolvimento apÃ³s a resposta
Â  Â  developmentMessage.remove();

Â  }, 1500); // Simula um tempo de processamento de 1.5 segundos
}

function addMessage(username, text, timestamp, avatarUrl, uid, isAI) {
Â  const msg = document.createElement('div');
Â  msg.classList.add('message-bubble');

Â  if (currentUser && uid === currentUser.uid) {
Â  Â  msg.classList.add('own-message'); Â  // direita
Â  } else {
Â  Â  msg.classList.add('other-message'); // esquerda
Â  }

Â  const time = (timestamp && timestamp.seconds)
Â  Â  ? new Date(timestamp.seconds * 1000).toLocaleTimeString()
Â  Â  : 'Agora';

Â  msg.innerHTML = `
Â  Â  <div class="message-avatar" style="background-image: url('${avatarUrl || ''}')"></div>
Â  Â  <div class="message-content">
Â  Â  Â  <span class="message-author">${escapeHTML(username || '')}</span>
Â  Â  Â  <p class="message-text">${escapeHTML(text || '')}</p>
Â  Â  Â  <span class="message-timestamp">${time}</span>
Â  Â  </div>
Â  `;
Â  if (isAI) {
Â  Â  aiChatMessagesContainer && aiChatMessagesContainer.prepend(msg);
Â  } else {
Â  Â  chatMessagesContainer && chatMessagesContainer.prepend(msg);
Â  }
}

function clearChat(isAI) {
Â  if (isAI) {
Â  Â  if (aiChatMessagesContainer) aiChatMessagesContainer.innerHTML = '';
Â  } else {
Â  Â  if (chatMessagesContainer) chatMessagesContainer.innerHTML = '';
Â  }
}

function escapeHTML(str) {
Â  return (str || '').replace(/[&<>"']/g, s => (
Â  Â  { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[s]
Â  ));
}


// ========== Perfil (14 dias + avatar) ==========
if (saveProfileBtn) {
Â  saveProfileBtn.addEventListener('click', async () => {
Â  Â  try {
Â  Â  Â  if (!currentUser) return;

Â  Â  Â  const newName = (profileUsernameInput?.value || '').trim();
Â  Â  Â  const avatarFile = avatarUploadInput?.files?.[0] || null;

Â  Â  Â  // trava de 14 dias
Â  Â  Â  const userRef = doc(db, "users", currentUser.uid);
Â  Â  Â  const snap = await getDoc(userRef);
Â  Â  Â  const now = Date.now();
Â  Â  Â  const lastChange = snap.exists() ? (snap.data().lastNameChange || 0) : 0;
Â  Â  Â  const limit = 14 * 24 * 60 * 60 * 1000;

Â  Â  Â  if (newName && newName !== currentUser.displayName && (now - lastChange < limit)) {
Â  Â  Â  Â  profileMessage && (profileMessage.textContent = 'VocÃª sÃ³ pode mudar o nome a cada 14 dias!');
Â  Â  Â  Â  profileMessage && (profileMessage.style.color = 'orange');
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  let photoURL = currentUser.photoURL || 'https://www.gravatar.com/avatar/?d=retro&s=200';

Â  Â  Â  if (avatarFile) {
Â  Â  Â  Â  // upload no Storage
Â  Â  Â  Â  const fileRef = storageRef(storage, `avatars/${currentUser.uid}/${Date.now()}_${avatarFile.name}`);
Â  Â  Â  Â  await uploadBytes(fileRef, avatarFile);
Â  Â  Â  Â  photoURL = await getDownloadURL(fileRef);
Â  Â  Â  }

Â  Â  Â  // Atualiza Auth Profile
Â  Â  Â  await updateProfile(auth.currentUser, {
Â  Â  Â  Â  displayName: newName || currentUser.displayName,
Â  Â  Â  Â  photoURL
Â  Â  Â  });

Â  Â  Â  // Atualiza Firestore (nome lower ajuda na busca)
Â  Â  Â  await setDoc(userRef, {
Â  Â  Â  Â  username: auth.currentUser.displayName,
Â  Â  Â  Â  usernameLower: (auth.currentUser.displayName || '').toLowerCase(),
Â  Â  Â  Â  photoURL: photoURL,
Â  Â  Â  Â  ...(newName && newName !== currentUser.displayName ? { lastNameChange: now } : {})
Â  Â  Â  }, { merge: true });

Â  Â  Â  // UI
Â  Â  Â  displayUsername && (displayUsername.textContent = auth.currentUser.displayName || 'UsuÃ¡rio');
Â  Â  Â  userAvatarImg && (userAvatarImg.style.backgroundImage = `url('${photoURL}')`);
Â  Â  Â  modalAvatarPreview && (modalAvatarPreview.src = photoURL);
Â  Â  Â  profileMessage && (profileMessage.textContent = 'Perfil atualizado!');
Â  Â  Â  profileMessage && (profileMessage.style.color = 'green');
Â  Â  Â  setTimeout(() => profileEditModal && (profileEditModal.style.display = 'none'), 800);

Â  Â  } catch (err) {
Â  Â  Â  console.error(err);
Â  Â  Â  profileMessage && (profileMessage.textContent = 'Erro ao atualizar perfil.');
Â  Â  Â  profileMessage && (profileMessage.style.color = 'red');
Â  Â  }
Â  });
}

// prÃ©-visualizaÃ§Ã£o do avatar
if (avatarUploadInput) {
Â  avatarUploadInput.addEventListener('change', () => {
Â  Â  const f = avatarUploadInput.files?.[0];
Â  Â  if (!f) return;
Â  Â  const url = URL.createObjectURL(f);
Â  Â  modalAvatarPreview && (modalAvatarPreview.src = url);
Â  });
}


// ========== Amigos (buscar, solicitar, aceitar) ==========
function listenForFriendRequests() {
Â  if (!currentUser) return;
Â  const friendRequestsRef = collection(db, `users/${currentUser.uid}/friendRequests`);
Â  const qReq = query(friendRequestsRef, orderBy('createdAt', 'desc'));
Â  onSnapshot(qReq, (snapshot) => {
Â  Â  renderFriendRequests(snapshot.docs.map(d => ({ id: d.id, ...d.data() })));
Â  });
}

function renderFriendRequests(requests) {
Â  if (!friendRequestsList) return;
Â  friendRequestsList.innerHTML = '';

Â  if (!requests.length) {
Â  Â  const p = document.createElement('p');
Â  Â  p.className = 'modal-message';
Â  Â  p.textContent = 'Nenhuma solicitaÃ§Ã£o pendente.';
Â  Â  friendRequestsList.appendChild(p);
Â  Â  return;
Â  }

Â  requests.forEach(req => {
Â  Â  const div = document.createElement('div');
Â  Â  div.className = 'friend-request-item';
Â  Â  div.innerHTML = `
Â  Â  Â  <span>${escapeHTML(req.fromName || 'UsuÃ¡rio')}</span>
Â  Â  Â  <button class="accept-btn">Aceitar</button>
Â  Â  `;
Â  Â  div.querySelector('.accept-btn').addEventListener('click', () => {
Â  Â  Â  acceptFriendRequest(req.id, req.fromUid, req.fromName);
Â  Â  });
Â  Â  friendRequestsList.appendChild(div);
Â  });
}

async function sendFriendRequestToUid(friendUid, friendName) {
Â  if (!currentUser || !friendUid) return;
Â  const friendRequestsRef = collection(db, `users/${friendUid}/friendRequests`);
Â  await addDoc(friendRequestsRef, {
Â  Â  fromUid: currentUser.uid,
Â  Â  fromName: currentUser.displayName || 'UsuÃ¡rio',
Â  Â  createdAt: serverTimestamp()
Â  });
Â  alert('SolicitaÃ§Ã£o enviada!');
}

async function acceptFriendRequest(requestId, fromUid, fromName) {
Â  if (!currentUser) return;

Â  try {
Â  Â  const myFriendsRef = collection(db, `users/${currentUser.uid}/friends`);
Â  Â  const otherFriendsRef = collection(db, `users/${fromUid}/friends`);
Â  Â  await Promise.all([
Â  Â  Â  addDoc(myFriendsRef, { uid: fromUid, name: fromName || 'UsuÃ¡rio', createdAt: serverTimestamp() }),
Â  Â  Â  addDoc(otherFriendsRef, { uid: currentUser.uid, name: currentUser.displayName || 'UsuÃ¡rio', createdAt: serverTimestamp() })
Â  Â  ]);

Â  Â  // remove a solicitaÃ§Ã£o
Â  Â  await deleteDoc(doc(db, `users/${currentUser.uid}/friendRequests`, requestId));
Â  Â  alert(`VocÃª e ${fromName} agora sÃ£o amigos!`);
Â  } catch (e) {
Â  Â  console.error(e);
Â  Â  alert('Erro ao aceitar solicitaÃ§Ã£o.');
Â  }
}

// Buscar usuÃ¡rio por nome (exato). Dica: salve usernameLower no Firestore para buscas case-insensitive.
if (searchFriendBtn) {
Â  searchFriendBtn.addEventListener('click', async () => {
Â  Â  foundUserCache = null;
Â  Â  foundUserProfileBox && (foundUserProfileBox.style.display = 'none');
Â  Â  searchResultMessage && (searchResultMessage.textContent = 'Buscando...');

Â  Â  const username = (friendUsernameSearchInput?.value || '').trim();
Â  Â  if (!username) {
Â  Â  Â  searchResultMessage && (searchResultMessage.textContent = 'Digite um nome de usuÃ¡rio.');
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  // Primeiro tenta pelo campo normal
Â  Â  Â  let qUsers = query(collection(db, 'users'), where('username', '==', username));
Â  Â  Â  let snap = await getDocs(qUsers);

Â  Â  Â  // Se quiser permitir case-insensitive, garanta que seu auth.js salva usernameLower
Â  Â  Â  if (snap.empty) {
Â  Â  Â  Â  qUsers = query(collection(db, 'users'), where('usernameLower', '==', username.toLowerCase()));
Â  Â  Â  Â  snap = await getDocs(qUsers);
Â  Â  Â  }

Â  Â  Â  if (snap.empty) {
Â  Â  Â  Â  searchResultMessage && (searchResultMessage.textContent = 'UsuÃ¡rio nÃ£o encontrado.');
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  const docUser = snap.docs[0];
Â  Â  Â  const data = docUser.data();
Â  Â  Â  foundUserCache = { uid: docUser.id, ...data };

Â  Â  Â  searchResultMessage && (searchResultMessage.textContent = '');
Â  Â  Â  if (foundUserAvatar) foundUserAvatar.src = data.photoURL || 'https://www.gravatar.com/avatar/?d=retro&s=200';
Â  Â  Â  if (foundUserName) foundUserName.textContent = data.username || 'UsuÃ¡rio';
Â  Â  Â  foundUserProfileBox && (foundUserProfileBox.style.display = 'block');
Â  Â  } catch (e) {
Â  Â  Â  console.error(e);
Â  Â  Â  searchResultMessage && (searchResultMessage.textContent = 'Erro ao buscar.');
Â  Â  }
Â  });
}

if (sendFriendRequestBtn) {
Â  sendFriendRequestBtn.addEventListener('click', async () => {
Â  Â  if (!foundUserCache) return;
Â  Â  if (foundUserCache.uid === currentUser?.uid) {
Â  Â  Â  alert('VocÃª nÃ£o pode adicionar vocÃª mesmo ðŸ˜…');
Â  Â  Â  return;
Â  Â  }
Â  Â  await sendFriendRequestToUid(foundUserCache.uid, foundUserCache.username);
Â  Â  // limpa UI
Â  Â  foundUserProfileBox && (foundUserProfileBox.style.display = 'none');
Â  Â  friendUsernameSearchInput && (friendUsernameSearchInput.value = '');
Â  Â  searchResultMessage && (searchResultMessage.textContent = 'SolicitaÃ§Ã£o enviada!');
Â  });
}


// ========== Salas Privadas (cÃ³digo) ==========
function generateRoomCode() {
Â  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

async function createRoom(roomName) {
Â  if (!currentUser || !roomName) return;

Â  try {
Â  Â  const code = generateRoomCode();
Â  Â  const roomsRef = collection(db, 'rooms');
Â  Â  const docRef = await addDoc(roomsRef, {
Â  Â  Â  name: roomName,
Â  Â  Â  ownerUid: currentUser.uid,
Â  Â  Â  private: true,
Â  Â  Â  code,
Â  Â  Â  createdAt: serverTimestamp()
Â  Â  });

Â  Â  currentRoom = docRef.id;
Â  Â  listenForMessages(currentRoom);

Â  Â  if (createRoomCodeElement) createRoomCodeElement.textContent = `CÃ³digo: ${code}`;
Â  Â  if (createRoomMessageElement) createRoomMessageElement.textContent = 'Compartilhe com seus amigos!';

Â  Â  alert(`Sala "${roomName}" criada!`);
Â  Â  loadPrivateRooms(); // atualiza a lista
Â  } catch (e) {
Â  Â  console.error(e);
Â  Â  alert('Erro ao criar sala.');
Â  }
}

async function joinRoomByCode(code) {
Â  try {
Â  Â  const roomsRef = collection(db, 'rooms');
Â  Â  const qRooms = query(roomsRef, where('code', '==', code));
Â  Â  const snap = await getDocs(qRooms);
Â  Â  if (snap.empty) {
Â  Â  Â  joinRoomMessageElement && (joinRoomMessageElement.textContent = 'CÃ³digo invÃ¡lido!');
Â  Â  Â  alert('CÃ³digo invÃ¡lido!');
Â  Â  Â  return;
Â  Â  }
Â  Â  const room = snap.docs[0];
Â  Â  joinRoom(room.id, room.data().name);
Â  } catch (e) {
Â  Â  console.error(e);
Â  Â  alert('Erro ao entrar na sala.');
Â  }
}

function joinRoom(roomId, roomName) {
Â  currentRoom = roomId;
Â  listenForMessages(currentRoom);
Â  if (chatRoomName) chatRoomName.textContent = roomName;
Â  if (chatInput) chatInput.placeholder = `Conversar em ${roomName}`;
}

function loadPrivateRooms() {
Â  const roomsRef = collection(db, 'rooms');
Â  const qRooms = query(roomsRef, where('private', '==', true));
Â  onSnapshot(qRooms, (snapshot) => {
Â  Â  const rooms = [];
Â  Â  snapshot.forEach(docSnap => rooms.push({ id: docSnap.id, ...docSnap.data() }));
Â  Â  updatePrivateRoomsUI(rooms);
Â  });
}

function updatePrivateRoomsUI(rooms) {
Â  if (!privateRoomsList) return;
Â  privateRoomsList.innerHTML = '';
Â  rooms.forEach(room => {
Â  Â  const li = document.createElement('li');
Â  Â  li.className = 'private-room-item';
Â  Â  li.dataset.roomId = room.id;
Â  Â  li.textContent = room.name || 'Sala privada';

Â  Â  li.addEventListener('click', () => joinRoom(room.id, room.name || 'Sala Privada'));
Â  Â  privateRoomsList.appendChild(li);
Â  });
}


// ========== Tema & NotificaÃ§Ãµes ==========
function loadTheme() {
Â  const saved = localStorage.getItem('theme') || 'light';
Â  document.body.className = saved;
Â  themeSelect && (themeSelect.value = saved);
}
function loadNotificationSetting() {
Â  const enabled = localStorage.getItem('notifications') === 'true';
Â  notificationToggle && (notificationToggle.checked = enabled);
}


// ========== Modais util ==========
function openModal(modal) {
Â  if (!modal) return;
Â  modal.style.display = 'flex';
Â  setTimeout(() => modal.classList.add('show'), 10);
}
function closeModal(modal) {
Â  if (!modal) return;
Â  modal.classList.remove('show');
Â  setTimeout(() => modal.style.display = 'none', 300);
}


// ========== Eventos ==========
document.addEventListener('DOMContentLoaded', () => {
Â  // Enviar mensagem
Â  sendButton && sendButton.addEventListener('click', () => {
Â  Â  if (!chatInput) return;
Â  Â  const val = chatInput.value.trim();
Â  Â  if (!val) return;
Â  Â  sendMessage(val);
Â  Â  chatInput.value = '';
Â  });
Â  chatInput && chatInput.addEventListener('keydown', (e) => {
Â  Â  if (e.key === 'Enter') sendButton?.click();
Â  });

Â  // Clicar em categorias/salas pÃºblicas (do seu HTML)
Â  if (roomItems?.length) {
Â  Â  roomItems.forEach(item => {
Â  Â  Â  item.addEventListener('click', () => {
Â  Â  Â  Â  roomItems.forEach(i => i.classList.remove('active'));
Â  Â  Â  Â  item.classList.add('active');
Â  Â  Â  Â  const roomId = item.dataset.roomId;
Â  Â  Â  Â  
Â  Â  Â  Â  // Troca o chat de exibiÃ§Ã£o
Â  Â  Â  Â  if (roomId === 'ia-chat') {
Â  Â  Â  Â  Â  chatMessagesContainer && (chatMessagesContainer.style.display = 'none');
Â  Â  Â  Â  Â  aiChatMessagesContainer && (aiChatMessagesContainer.style.display = 'block');
Â  Â  Â  Â  Â  chatInput.placeholder = 'Conversar com Blinkly IA...';
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  chatMessagesContainer && (chatMessagesContainer.style.display = 'block');
Â  Â  Â  Â  Â  aiChatMessagesContainer && (aiChatMessagesContainer.style.display = 'none');
Â  Â  Â  Â  Â  chatInput.placeholder = `Conversar em ${item.textContent}`;
Â  Â  Â  Â  }

Â  Â  Â  Â  currentRoom = roomId;
Â  Â  Â  Â  listenForMessages(roomId);
Â  Â  Â  Â  chatRoomName && (chatRoomName.textContent = item.textContent);
Â  Â  Â  });
Â  Â  });
Â  }

Â  // Perfil
Â  openProfileModalBtn && openProfileModalBtn.addEventListener('click', () => openModal(profileEditModal));
Â  closeProfileModalBtn && closeProfileModalBtn.addEventListener('click', () => closeModal(profileEditModal));

Â  // Salas privadas
Â  createRoomBtn && createRoomBtn.addEventListener('click', () => {
Â  Â  createRoomMessageElement && (createRoomMessageElement.textContent = '');
Â  Â  createRoomCodeElement && (createRoomCodeElement.textContent = '');
Â  Â  openModal(createRoomModal);
Â  });
Â  closeCreateRoomBtn && closeCreateRoomBtn.addEventListener('click', () => closeModal(createRoomModal));
Â  confirmCreateRoomBtn && confirmCreateRoomBtn.addEventListener('click', () => {
Â  Â  const roomName = (newRoomNameInput?.value || '').trim();
Â  Â  if (!roomName) {
Â  Â  Â  createRoomMessageElement && (createRoomMessageElement.textContent = 'Digite um nome.');
Â  Â  Â  return;
Â  Â  }
Â  Â  createRoom(roomName);
Â  });

Â  joinRoomBtn && joinRoomBtn.addEventListener('click', () => {
Â  Â  joinRoomMessageElement && (joinRoomMessageElement.textContent = '');
Â  Â  openModal(joinRoomModal);
Â  });
Â  closeJoinRoomBtn && closeJoinRoomBtn.addEventListener('click', () => closeModal(joinRoomModal));
Â  confirmJoinRoomBtn && confirmJoinRoomBtn.addEventListener('click', () => {
Â  Â  const code = (joinRoomCodeInput?.value || '').trim().toUpperCase();
Â  Â  if (!code) {
Â  Â  Â  joinRoomMessageElement && (joinRoomMessageElement.textContent = 'Informe o cÃ³digo.');
Â  Â  Â  return;
Â  Â  }
Â  Â  joinRoomByCode(code);
Â  });

Â  // Amigos
Â  openAddFriendModalBtn && openAddFriendModalBtn.addEventListener('click', () => {
Â  Â  friendUsernameSearchInput && (friendUsernameSearchInput.value = '');
Â  Â  foundUserProfileBox && (foundUserProfileBox.style.display = 'none');
Â  Â  searchResultMessage && (searchResultMessage.textContent = '');
Â  Â  openModal(addFriendModal);
Â  });
Â  closeAddFriendModalBtn && closeAddFriendModalBtn.addEventListener('click', () => closeModal(addFriendModal));

Â  showRequestsBtn && showRequestsBtn.addEventListener('click', () => openModal(friendRequestsModal));
Â  closeFriendRequestsModalBtn && closeFriendRequestsModalBtn.addEventListener('click', () => closeModal(friendRequestsModal));

Â  // ConfiguraÃ§Ãµes
Â  openSettingsModalBtn && openSettingsModalBtn.addEventListener('click', () => openModal(settingsModal));
Â  closeSettingsModalBtn && closeSettingsModalBtn.addEventListener('click', () => closeModal(settingsModal));

Â  themeSelect && themeSelect.addEventListener('change', () => {
Â  Â  document.body.className = themeSelect.value;
Â  Â  localStorage.setItem('theme', themeSelect.value);
Â  });
Â  notificationToggle && notificationToggle.addEventListener('change', () => {
Â  Â  localStorage.setItem('notifications', !!notificationToggle.checked);
Â  });

Â  // MÃºsica (opcional â€” sÃ³ funciona se existir #go-music no HTML)
Â  goMusicBtn && goMusicBtn.addEventListener('click', () => window.location.href = 'musica.html');

Â  // Logout
Â  logoutBtn && logoutBtn.addEventListener('click', () => signOut(auth).then(() => window.location.reload()));
Â  logoutBtnModal && logoutBtnModal.addEventListener('click', () => signOut(auth).then(() => window.location.reload()));

Â  // Carrega preferÃªncias
Â  loadTheme();
Â  loadNotificationSetting();
});